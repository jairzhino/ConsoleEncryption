#pragma checksum "/Users/gersonreply/Documents/Gerson .Net/ConsoleEncryption/Pages/Index.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "175434cfd90a2cc59ed830813f129811ac3a502b"
// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace ConsoleEncryption.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Blazor;
    using Microsoft.AspNetCore.Blazor.Components;
    using System.Net.Http;
    using Microsoft.AspNetCore.Blazor.Layouts;
    using Microsoft.AspNetCore.Blazor.Routing;
    using Microsoft.JSInterop;
    using ConsoleEncryption;
    using ConsoleEncryption.Shared;
    [Microsoft.AspNetCore.Blazor.Layouts.LayoutAttribute(typeof(MainLayout))]

    [Microsoft.AspNetCore.Blazor.Components.RouteAttribute("/")]
    public class Index : Microsoft.AspNetCore.Blazor.Components.BlazorComponent
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Blazor.RenderTree.RenderTreeBuilder builder)
        {
        }
        #pragma warning restore 1998
#line 92 "/Users/gersonreply/Documents/Gerson .Net/ConsoleEncryption/Pages/Index.cshtml"
            
    ElementRef inputkeyref;
    ElementRef inputfileref;
    string strkey="";
    string strFile="";
    bool swbol=true;
    List<string> list=new List<string>();
    string strencrypt="";
    string newline="";
    /*protected override async Task OnInitAsync(){
        
    }*/
    void RemoveLine(string item){
        Console.WriteLine("item : " + item);
        string aux=list.First(p=>p.Equals(item));
        list.Remove(aux);
    }
    void AddLine(){
        list.Insert(0,newline);
        newline="";
    }
    async Task changekey(UIChangeEventArgs evt){
        strkey = await ConsoleEncryption.Services.serviceInterop.GetFileData(inputkeyref);
        byte[] decodedBytes = Convert.FromBase64String(strkey);
        strkey = System.Text.Encoding.UTF8.GetString(decodedBytes);
        
    }
    async Task changefile(UIChangeEventArgs evt){
        strFile = await ConsoleEncryption.Services.serviceInterop.GetFileData(inputfileref);
        byte[] decodedBytes = Convert.FromBase64String(strFile);
        strFile = System.Text.Encoding.UTF8.GetString(decodedBytes);
        string[] auxstr= strFile.Split(Environment.NewLine.ToCharArray());
        strencrypt=strFile;
        FillData(auxstr);
    }
    private byte[] base64tosArrayByte(string strbase64){
        
        byte[] decodedBytes=Convert.FromBase64String(strbase64);
        return decodedBytes;
    }
    void FillData(string[] auxstr){
        list=new List<string>();
        foreach (string item in auxstr)
        {
            list.Add(item);
        }
    }
    void EncryptData(){
        //System.Security.Cryptography.Aes
        if(strkey.Length>16)
            strkey=strkey.Substring(0,16);
        byte[] key=System.Text.Encoding.UTF8.GetBytes(strkey);
        string straux="ADOTRMDWOD1QWELK";
        byte[] IV=System.Text.Encoding.UTF8.GetBytes(straux);
        string plaintext=getPlainText();
        byte[] encrypted;
        using (var aes = System.Security.Cryptography.Aes.Create())
        {
            aes.IV=IV;
            aes.Key=key;
            var encryptor=aes.CreateEncryptor(aes.Key,aes.IV);
            using (var ms=new System.IO.MemoryStream())
            {
                using (var csEncrypt=new System.Security.Cryptography.CryptoStream(ms,encryptor,
                System.Security.Cryptography.CryptoStreamMode.Write))
                {
                    using (var swEncrypt=new System.IO.StreamWriter(csEncrypt))
                    {
                        swEncrypt.Write(plaintext);
                    }
                    encrypted=ms.ToArray();
                    strencrypt=Convert.ToBase64String(encrypted);
                    swbol=!swbol;
                    list=new List<string>();
                }
            }
        }
    }
    void DecryptData(){
        //System.Security.Cryptography.Aes
        if(strkey.Length>16)
            strkey=strkey.Substring(0,16);
        byte[] key=System.Text.Encoding.UTF8.GetBytes(strkey);
        string straux="ADOTRMDWOD1QWELK";
        byte[] IV=System.Text.Encoding.UTF8.GetBytes(straux);
        byte[] encryptedText=base64tosArrayByte(strencrypt);
        using (var aes = System.Security.Cryptography.Aes.Create())
        {
            aes.IV=IV;
            aes.Key=key;
            
            var decryptor=aes.CreateDecryptor(aes.Key,aes.IV);
            using (var ms=new System.IO.MemoryStream(encryptedText))
            {
                using (var csDecrypt=new System.Security.Cryptography.CryptoStream(ms,decryptor,
                System.Security.Cryptography.CryptoStreamMode.Read))
                {
                    using (var swDecrypt=new System.IO.StreamReader(csDecrypt))
                    {
                        strFile=swDecrypt.ReadToEnd();
                        FillData(strFile.Split(Environment.NewLine.ToCharArray()));
                        swbol=!swbol;
                        strencrypt="";
                    }
                }
            }
        }
    }
    private string getPlainText(){
        string plaintext="";
        foreach (string item in list)
        {
            plaintext= plaintext+item+Environment.NewLine;
        }
        return plaintext;
    }

#line default
#line hidden
    }
}
#pragma warning restore 1591
